#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    //automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        /*
        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 4>;

            label = "MKP_EXIT_AML";
        };
*/

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&mo 4>,
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>;

            label = "MKP_EXIT_AML";
        };

        pw: pw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(P) &kp A &kp S &kp S &kp W &kp N0 &kp R &kp D &kp EXCL &kp N1>;
            label = "PW";
        };

        pwp: pwp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(S) &kp A &kp K &kp U &kp R &kp A &kp I &kp N2 &kp N2 &kp N9 &kp N9 &kp N6 &kp N4 &kp N1 &kp N2>;
            label = "PWP";
        };

        ct: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N6 &kp W &kp LS(W) &kp LS(J) &kp LS(M) &kp LS(T) &kp N7 &kp EXCL>;
            label = "NEW_MACRO";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R      &kp T                                           &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F      &kp G        &sl 6               &kp AT_SIGN    &kp H        &kp J  &kp K      &kp L    &kp RIGHT_SHIFT
&kp Z      &kp X         &kp C         &kp V      &kp B        &kp LEFT_SHIFT      &kp UNDER      &kp N        &kp M  &kp COMMA  &kp DOT  &kp MINUS
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt 4 TAB  &lt 2 SPACE  &kp LA(GRAVE)       &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;
        };

        FUNCTION {
            bindings = <
&kp BACKSPACE  &kp HOME      &kp UP_ARROW      &kp END        &kp DEL                                        &kp F1  &kp F2  &kp F3      &kp F4        &kp F5
&kp PLUS       &kp LEFT      &kp DOWN          &kp RIGHT      &kp PG_UP      &none          &kp ESC          &kp F6  &kp F7  &kp F8      &kp F9        &kp F10
&kp MINUS      &kp LG(LEFT)  &kp LG(UP_ARROW)  &kp LG(RIGHT)  &kp PAGE_DOWN  &kp ENTER      &kp RIGHT_SHIFT  &none   &none   &kp LS(F2)  &kp LEFT_ALT  &kp F11
&kp RCTRL      &kp COLON     &kp LG(DOWN)      &none          &none          &none          &none            &none                                     &kp F12
            >;
        };

        NUM {
            bindings = <
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EXCLAMATION                            &kp N6     &kp N7        &kp N8     &kp N9      &kp N0
&kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LESS_THAN         &kp GREATER_THAN       &kp QUESTION     &none          &kp EQUAL  &kp N1     &kp N2        &kp N3     &kp N4      &kp N5
&kp SQT           &kp DOUBLE_QUOTES  &kp SEMICOLON         &kp COLON              &kp TILDE        &kp LCTRL      &kp PLUS   &kp MINUS  &kp ASTERISK  &kp SLASH  &kp PERIOD  &kp PERCENT
&kp LEFT_SHIFT    &kp HASH           &kp DOLLAR            &none                  &none            &none          &none      &none                                           &kp NON_US_BACKSLASH
            >;
        };

        ARROW {
            bindings = <
&none  &none  &none  &none  &none                    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none                       &none
            >;
        };

        MOUSE {
            bindings = <
&kp LC(S)  &none  &none  &none  &none                    &none  &none     &none     &kp LC(Y)  &kp LC(Z)
&kp LC(A)  &none  &none  &none  &none  &none      &none  &none  &mkp MB1  &mkp MB3  &mkp MB2   &mkp MB3
&kp LC(V)  &none  &none  &none  &none  &none      &none  &none  &mkp MB4  &none     &mkp MB5   &mkp MB1
&kp LC(C)  &none  &none  &none  &none  &none      &none  &none                                 &mkp MB2
            >;
        };

        SCROLL {
            bindings = <
&none  &none  &none  &none  &none                    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none                       &none
            >;
        };

        layer_6 {
            bindings = <
&pw    &ct    &none  &none  &none                          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&pwp   &none  &none  &none  &none  &none      &none        &none         &none         &none         &none         &none
&none  &none  &none  &none  &none  &none      &bootloader  &none         &none         &none         &none         &bt BT_CLR
&none  &none  &none  &none  &none  &none      &none        &none                                                   &bt BT_CLR_ALL
            >;
        };
    };
};
